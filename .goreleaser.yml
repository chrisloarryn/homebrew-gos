# GoReleaser configuration for GOS CLI
# See: https://goreleaser.com
version: 2

project_name: gos

before:
  hooks:
    - go mod tidy
    - go generate ./...

builds:
  - id: gos
    main: ./main.go
    binary: gos
    env:
      - CGO_ENABLED=0
    goos: [linux, windows, darwin]
    goarch: ["386", amd64, arm, arm64]
    goarm: ["6", "7"]
    ignore:
      - goos: windows
        goarch: arm
      - goos: windows
        goarch: arm64
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.commit={{.Commit}}
      - -X main.date={{.Date}}
    flags: [-trimpath]

archives:
  - id: gos
    # formato por defecto: tar.gz (zip en Windows).  Ya no hace falta “format” / format_overrides.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    files:
      - README.md
      - LICENSE*
      - RESUMEN.md
      - example-usage.sh

checksum:
  name_template: checksums.txt

snapshot:
  # Nueva sintaxis v2 → version_template
  version_template: "{{ incpatch .Version }}-next"

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^ci:"
      - "^chore:"
      - "merge conflict"
      - Merge pull request
      - Merge remote-tracking branch
      - Merge branch
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "Bug fixes"
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "Performance improvements"
      regexp: '^.*?perf(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: Refactors
      regexp: '^.*?refactor(\([[:word:]]+\))??!?:.+$'
      order: 3
    - title: Documentation updates
      regexp: '^.*?docs(\([[:word:]]+\))??!?:.+$'
      order: 4
    - title: Others
      order: 999

release:
  replace_existing_draft: true
  target_commitish: "{{ .Commit }}"
  name_template: "{{ .ProjectName }} v{{ .Version }}"
  header: |
    ## 🚀 GOS CLI v{{ .Version }}
    
    A comprehensive Go version manager CLI built with Cobra.
    
    ### 📦 What's New in This Release
  footer: |
    
    ### 📥 Installation
    
    #### Using curl (recommended):
    ```bash
    # macOS (Intel)
    curl -sSL https://github.com/chrisloarryn/homebrew-gos/releases/download/v{{.Version}}/gos_Darwin_x86_64.tar.gz | tar -xz && sudo mv gos /usr/local/bin/
    
    # macOS (Apple Silicon)
    curl -sSL https://github.com/chrisloarryn/homebrew-gos/releases/download/v{{.Version}}/gos_Darwin_arm64.tar.gz | tar -xz && sudo mv gos /usr/local/bin/
    
    # Linux (x86_64)
    curl -sSL https://github.com/chrisloarryn/homebrew-gos/releases/download/v{{.Version}}/gos_Linux_x86_64.tar.gz | tar -xz && sudo mv gos /usr/local/bin/
    
    # Linux (ARM64)
    curl -sSL https://github.com/chrisloarryn/homebrew-gos/releases/download/v{{.Version}}/gos_Linux_arm64.tar.gz | tar -xz && sudo mv gos /usr/local/bin/
    ```
    
    #### Manual download:
    Download the appropriate binary for your platform from the assets below.
    
    ### 🚀 Quick Start
    ```bash
    gos setup
    source ~/.zshrc
    gos install 1.22.4
    gos use 1.22.4
    gos status
    ```
    
    ### 📋 Full Documentation
    See the [README.md](https://github.com/chrisloarryn/homebrew-gos/blob/main/README.md) for complete documentation.

# Homebrew tap (fórmula clásica)
brews:
  - name: gos
    repository:
      owner: chrisloarryn
      name: homebrew-gos
      branch: main
    directory: Formula
    homepage: https://github.com/chrisloarryn/homebrew-gos
    description: A comprehensive Go version manager CLI
    license: MIT
    test: |
      system "#{bin}/gos --help"
    dependencies:
      - name: curl
      - name: git
        type: optional
    install: |-
      bin.install "gos"
      generate_completions_from_executable(bin/"gos", "completion")

# Homebrew cask moderno (opcional, permite instalación con GUI o `brew install --cask`)
homebrew_casks:
  - name: gos
    repository:
      owner: chrisloarryn
      name: homebrew-gos
      branch: main
    homepage: https://github.com/chrisloarryn/homebrew-gos
    description: A comprehensive Go version manager CLI
    caveats: |
      After installation, run:
        gos setup
    hooks:
      post:
        install: |
          if system_command("/usr/bin/xattr", args: ["-h"]).exit_status == 0
            system_command "/usr/bin/xattr", args: ["-dr", "com.apple.quarantine", "#{staged_path}/gos"]
          end

# Universal macOS binaries
universal_binaries:
  - replace: true

# Windows Deb/RPM via nfpm
nfpms:
  - id: gos
    package_name: gos
    file_name_template: >-
      {{- trimsuffix .ConventionalFileName .ConventionalExtension -}}
      {{- .ConventionalExtension -}}
    vendor: Cristobal Contreras
    homepage: https://github.com/chrisloarryn/homebrew-gos
    maintainer: Cristobal Contreras <email@example.com>
    description: A comprehensive Go version manager CLI
    license: MIT
    formats: [deb, rpm]
    dependencies:
      - curl
    recommends:
      - git

# Docker images
dockers:
  - image_templates:
      - "chrisloarryn/gos:latest"
      - "chrisloarryn/gos:v{{ .Version }}"
      - "chrisloarryn/gos:v{{ .Major }}"
      - "chrisloarryn/gos:v{{ .Major }}.{{ .Minor }}"
    dockerfile: Dockerfile
    use: buildx
    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.title={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--platform=linux/amd64"

announce:
  # Ejemplo para habilitar anuncios si lo necesitas:
  # slack:
  #   enabled: true
  #   message_template: 'Nuevo release de GOS CLI: {{ .Tag }} ya está disponible 👉 {{ .ReleaseURL }}'